generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["public", "reporting"]
}

model Structure {
  id                           Int                         @id @default(autoincrement())
  dnaCode                      String                      @unique
  oldOperateur                 String
  filiale                      String?
  type                         StructureType
  oldNbPlaces                  Int
  placesACreer                 Int?
  placesAFermer                Int?
  echeancePlacesACreer         DateTime?
  echeancePlacesAFermer        DateTime?
  adresseAdministrative        String
  codePostalAdministratif      String
  communeAdministrative        String
  departementAdministratif     String
  latitude                     Decimal
  longitude                    Decimal
  nom                          String?
  debutConvention              DateTime?
  finConvention                DateTime?
  cpom                         Boolean
  creationDate                 DateTime
  finessCode                   String?
  lgbt                         Boolean
  fvvTeh                       Boolean
  public                       PublicType
  debutPeriodeAutorisation     DateTime?
  finPeriodeAutorisation       DateTime?
  debutCpom                    DateTime?
  finCpom                      DateTime?
  notes                        String?
  state                        StructureState              @default(A_FINALISER)
  controles                    Controle[]
  evaluations                  Evaluation[]
  evenementsIndesirablesGraves EvenementIndesirableGrave[]
  adresses                     Adresse[]
  contacts                     Contact[]
  structureTypologies          StructureTypologie[]
  activites                    Activite[]
  fileUploads                  FileUpload[]
  budgets                      Budget[]
  operateur                    Operateur?                  @relation(fields: [operateurId], references: [id])
  operateurId                  Int?
  forms                        Form[]
  campaigns                    Campaign[]
  referential                  Referential?                @relation("StructureToReferential")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@schema("public")
}

model Controle {
  id               Int          @id @default(autoincrement())
  structure        Structure    @relation(fields: [structureDnaCode], references: [dnaCode], onDelete: Cascade, onUpdate: Cascade)
  structureDnaCode String
  date             DateTime
  type             ControleType
  fileUploads      FileUpload[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@schema("public")
}

model Evaluation {
  id               Int          @id @default(autoincrement())
  structure        Structure    @relation(fields: [structureDnaCode], references: [dnaCode], onDelete: Cascade, onUpdate: Cascade)
  structureDnaCode String
  date             DateTime
  notePersonne     Int?
  notePro          Int?
  noteStructure    Int?
  note             Int?
  fileUploads      FileUpload[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@schema("public")
}

model EvenementIndesirableGrave {
  id               Int       @id @default(autoincrement())
  structure        Structure @relation(fields: [structureDnaCode], references: [dnaCode], onDelete: Cascade, onUpdate: Cascade)
  structureDnaCode String
  numeroDossier    String
  evenementDate    DateTime
  declarationDate  DateTime
  type             String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@schema("public")
}

model Adresse {
  id                Int                @id @default(autoincrement())
  structure         Structure          @relation(fields: [structureDnaCode], references: [dnaCode], onDelete: Cascade, onUpdate: Cascade)
  structureDnaCode  String
  adresse           String
  codePostal        String
  commune           String
  repartition       Repartition
  adresseTypologies AdresseTypologie[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@schema("public")
}

model AdresseTypologie {
  id               Int      @id @default(autoincrement())
  adresse          Adresse  @relation(fields: [adresseId], references: [id], onDelete: Cascade)
  adresseId        Int
  placesAutorisees Int
  date             DateTime
  qpv              Int
  logementSocial   Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@schema("public")
}

model Contact {
  id               Int         @id @default(autoincrement())
  structure        Structure   @relation(fields: [structureDnaCode], references: [dnaCode], onDelete: Cascade, onUpdate: Cascade)
  structureDnaCode String
  prenom           String
  nom              String
  telephone        String
  email            String
  role             String
  type             ContactType @default(AUTRE)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@schema("public")
}

model StructureTypologie {
  id               Int       @id @default(autoincrement())
  structure        Structure @relation(fields: [structureDnaCode], references: [dnaCode], onDelete: Cascade, onUpdate: Cascade)
  structureDnaCode String
  date             DateTime
  placesAutorisees Int?
  pmr              Int
  lgbt             Int
  fvvTeh           Int

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@schema("public")
}

model Activite {
  id                       Int        @id @default(autoincrement())
  structure                Structure? @relation(fields: [structureDnaCode], references: [dnaCode], onDelete: Cascade, onUpdate: Cascade)
  structureDnaCode         String
  date                     DateTime
  nbPlaces                 Int
  desinsectisation         Int
  remiseEnEtat             Int
  sousOccupation           Int
  travaux                  Int
  placesIndisponibles      Int
  placesVacantes           Int
  presencesInduesBPI       Int
  presencesInduesDeboutees Int

  @@schema("public")
}

model FileUpload {
  id                 Int                 @id @default(autoincrement())
  structure          Structure?          @relation(fields: [structureDnaCode], references: [dnaCode], onDelete: Cascade, onUpdate: Cascade)
  structureDnaCode   String?
  key                String              @unique
  mimeType           String
  fileSize           Int
  originalName       String
  date               DateTime?
  category           FileUploadCategory?
  startDate          DateTime?
  endDate            DateTime?
  controle           Controle?           @relation(fields: [controleId], references: [id], onDelete: Cascade)
  controleId         Int?
  evaluation         Evaluation?         @relation(fields: [evaluationId], references: [id], onDelete: Cascade)
  evaluationId       Int?
  categoryName       String?
  parentFileUpload   FileUpload?         @relation("FileUploadToFileUpload", fields: [parentFileUploadId], references: [id], onDelete: SetNull)
  parentFileUploadId Int?
  childFileUploads   FileUpload[]        @relation("FileUploadToFileUpload")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@schema("public")
}

model Budget {
  id                                Int        @id @default(autoincrement())
  structure                         Structure? @relation(fields: [structureDnaCode], references: [dnaCode], onDelete: Cascade, onUpdate: Cascade)
  structureDnaCode                  String
  date                              DateTime
  ETP                               Float?
  tauxEncadrement                   Float?
  coutJournalier                    Float?
  dotationDemandee                  Float?
  dotationAccordee                  Float?
  totalProduits                     Float?
  totalCharges                      Float?
  totalChargesProposees             Float?
  cumulResultatsNetsCPOM            Float?
  repriseEtat                       Float?
  excedentRecupere                  Float?
  excedentDeduit                    Float?
  reserveInvestissement             Float?
  chargesNonReconductibles          Float?
  reserveCompensationDeficits       Float?
  reserveCompensationBFR            Float?
  reserveCompensationAmortissements Float?
  fondsDedies                       Float?
  affectationReservesFondsDedies    Float?
  reportANouveau                    Float?
  autre                             Float?
  commentaire                       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@schema("public")
}

// Formulaires
model FormDefinition {
  id              Int                  @id @default(autoincrement())
  name            String
  version         Int
  slug            String               @unique
  stepsDefinition FormStepDefinition[]

  forms Form[]

  @@schema("public")
}

model FormStepDefinition {
  id               Int    @id @default(autoincrement())
  formDefinitionId Int
  label            String
  slug             String

  formDefinition FormDefinition @relation(fields: [formDefinitionId], references: [id])
  formSteps      FormStep[]

  @@unique([formDefinitionId, slug])
  @@schema("public")
}

model Form {
  id               Int     @id @default(autoincrement())
  structureCodeDna String
  formDefinitionId Int
  status           Boolean @default(false) // Li√© au bouton "Finaliser"

  structure      Structure      @relation(fields: [structureCodeDna], references: [dnaCode], onDelete: Cascade, onUpdate: Cascade)
  formDefinition FormDefinition @relation(fields: [formDefinitionId], references: [id])
  formSteps      FormStep[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([structureCodeDna, formDefinitionId])
  @@schema("public")
}

model FormStep {
  id               Int        @id @default(autoincrement())
  formId           Int
  stepDefinitionId Int
  status           StepStatus @default(NON_COMMENCE)
  // TODO : ajouter le champ authorId en lien avec une table Auteur plus tard

  form           Form               @relation(fields: [formId], references: [id], onDelete: Cascade)
  stepDefinition FormStepDefinition @relation(fields: [stepDefinitionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([formId, stepDefinitionId])
  @@schema("public")
}

model Campaign {
  id               Int     @id @default(autoincrement())
  structureCodeDna String
  name             String
  launched         Boolean @default(false)

  structure Structure @relation(fields: [structureCodeDna], references: [dnaCode], onDelete: Cascade, onUpdate: Cascade)

  @@schema("public")
}

model Referential {
  dnaCode   String     @id
  name      String?
  structure Structure? @relation("StructureToReferential", fields: [dnaCode], references: [dnaCode])

  @@schema("reporting")
}

model Operateur {
  id                Int         @id @default(autoincrement())
  name              String
  structures        Structure[]
  directionGenerale String?
  siret             String?
  siegeSocial       String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@schema("public")
}

// Enums
enum Repartition {
  DIFFUS
  COLLECTIF
  MIXTE

  @@schema("public")
}

enum ControleType {
  INOPINE
  PROGRAMME

  @@schema("public")
}

enum PublicType {
  TOUT_PUBLIC
  FAMILLE
  PERSONNES_ISOLEES

  @@schema("public")
}

enum StructureType {
  CADA
  HUDA
  CPH
  CAES
  PRAHDA

  @@schema("public")
}

enum ContactType {
  PRINCIPAL
  SECONDAIRE
  AUTRE

  @@schema("public")
}

enum FileUploadCategory {
  BUDGET_PREVISIONNEL_DEMANDE
  RAPPORT_BUDGETAIRE
  BUDGET_PREVISIONNEL_RETENU
  BUDGET_RECTIFICATIF
  COMPTE_ADMINISTRATIF_SOUMIS
  RAPPORT_ACTIVITE
  COMPTE_ADMINISTRATIF_RETENU
  DEMANDE_SUBVENTION
  COMPTE_RENDU_FINANCIER
  RAPPORT_ACTIVITE_OPERATEUR
  ARRETE_AUTORISATION
  CONVENTION
  ARRETE_TARIFICATION
  CPOM
  INSPECTION_CONTROLE
  EVALUATION
  AUTRE

  @@schema("public")
}

enum StructureState {
  A_FINALISER
  FINALISE

  @@schema("public")
}

enum StepStatus {
  NON_COMMENCE
  COMMENCE
  A_VERIFIER
  FINALISE
  VALIDE

  @@schema("public")
}

// Views
view ComparaisonPlaces {
  dnaCode                  String?
  total_places_autorisees  Int?
  places_autorisees        Int?
  total_places_activite    Int?
  diff_places              Int?
  diff_places_activite     Int?
  pct_diff_places          Float?
  pct_diff_places_activite Float?

  @@schema("reporting")
}

view StructuresAggregates {
  dnaCode                     String?
  places_autorisees_structure Int?
  pmr_structure               Int?
  lgbt_structure              Int?
  fvv_teh_structure           Int?
  places_autorisees_adresse   Int?
  qpv_adresse                 Int?
  logement_social_adresse     Int?
  date_adresse                DateTime?
  nb_adresses                 Int?
  date_structure              DateTime?
  nb_places_activite          Int?
  diff_places_adresse         Int?
  pct_diff_places_adresse     Float?
  diff_places_activite        Int?
  pct_diff_places_activite    Float?
  created_at                  DateTime?
  updated_at                  DateTime?

  @@schema("reporting")
}

view OperateursAggregates {
  id                          Int
  name                        String
  directionGenerale           String?
  siret                       String?
  siegeSocial                 String?
  nb_structures               Int
  places_autorisees_structure Int?
  pmr_structure               Int?
  lgbt_structure              Int?
  fvv_teh_structure           Int?
  places_autorisees_adresse   Int?
  qpv_adresse                 Int?
  logement_social_adresse     Int?
  created_at                  DateTime?
  updated_at                  DateTime?

  @@schema("reporting")
}
