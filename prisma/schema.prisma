generator client {
  provider = "prisma-client-js"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas = ["public", "reporting"]
}

model Structure {
  @@schema("public")
  id                           Int                         @id @default(autoincrement())
  dnaCode                      String                      @unique
  oldOperateur                 String
  filiale                      String?
  type                         StructureType
  oldNbPlaces                  Int
  placesACreer                 Int?
  placesAFermer                Int?
  echeancePlacesACreer         DateTime?
  echeancePlacesAFermer        DateTime?
  adresseAdministrative        String
  codePostalAdministratif      String
  communeAdministrative        String
  departementAdministratif     String
  latitude                     Decimal
  longitude                    Decimal
  nom                          String?
  debutConvention              DateTime?
  finConvention                DateTime?
  cpom                         Boolean
  creationDate                 DateTime
  finessCode                   String?
  lgbt                         Boolean
  fvvTeh                       Boolean
  public                       PublicType
  debutPeriodeAutorisation     DateTime?
  finPeriodeAutorisation       DateTime?
  debutCpom                    DateTime?
  finCpom                      DateTime?
  notes                        String?
  state                        StructureState              @default(A_FINALISER)
  controles                    Controle[]
  evaluations                  Evaluation[]
  evenementsIndesirablesGraves EvenementIndesirableGrave[]
  adresses                     Adresse[]
  contacts                     Contact[]
  structureTypologies          StructureTypologie[]
  activites                    Activite[]
  fileUploads                  FileUpload[]
  budgets                      Budget[]
  operateur                    Operateur?                  @relation(fields: [operateurId], references: [id])
  operateurId                  Int?
  forms                        Form[]
  campaigns                    Campaign[]
  referential                  StructureReferential? @relation("StructureToReferential")

  createdAt                    DateTime  @default(now())
  updatedAt                    DateTime  @updatedAt @default(now())
}

model Controle {
  @@schema("public")
  id               Int          @id @default(autoincrement())
  structure        Structure    @relation(fields: [structureDnaCode], references: [dnaCode], onDelete: Cascade)
  structureDnaCode String
  date             DateTime
  type             ControleType
  fileUploads      FileUpload[]

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt @default(now()) 
}

model Evaluation {
  @@schema("public")
  id               Int       @id @default(autoincrement())
  structure        Structure @relation(fields: [structureDnaCode], references: [dnaCode], onDelete: Cascade)
  structureDnaCode String
  date             DateTime
  notePersonne     Int
  notePro          Int
  noteStructure    Int
  note             Int

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt @default(now())
}

model EvenementIndesirableGrave {
  @@schema("public")
  id               Int       @id @default(autoincrement())
  structure        Structure @relation(fields: [structureDnaCode], references: [dnaCode], onDelete: Cascade)
  structureDnaCode String
  numeroDossier    String
  evenementDate    DateTime
  declarationDate  DateTime
  type             String

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt @default(now())
}

model Adresse {
  @@schema("public")
  id                Int                @id @default(autoincrement())
  structure         Structure          @relation(fields: [structureDnaCode], references: [dnaCode], onDelete: Cascade)
  structureDnaCode  String
  adresse           String
  codePostal        String
  commune           String
  repartition       Repartition
  adresseTypologies AdresseTypologie[]

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt @default(now())
}

model AdresseTypologie {
  @@schema("public")
  id               Int      @id @default(autoincrement())
  adresse          Adresse  @relation(fields: [adresseId], references: [id], onDelete: Cascade)
  adresseId        Int
  placesAutorisees Int
  date             DateTime
  qpv              Int
  logementSocial   Int

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt @default(now())
}

model Contact {
  @@schema("public")
  id               Int       @id @default(autoincrement())
  structure        Structure @relation(fields: [structureDnaCode], references: [dnaCode], onDelete: Cascade)
  structureDnaCode String
  prenom           String
  nom              String
  telephone        String
  email            String
  role             String
  type             ContactType @default(AUTRE)

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt @default(now())
}

model StructureTypologie {
  @@schema("public")
  id               Int       @id @default(autoincrement())
  structure        Structure @relation(fields: [structureDnaCode], references: [dnaCode], onDelete: Cascade)
  structureDnaCode String
  date             DateTime
  placesAutorisees Int?
  pmr              Int
  lgbt             Int
  fvvTeh           Int

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt @default(now())
}

model Activite {
  @@schema("public")
  id                       Int        @id @default(autoincrement())
  structure                Structure? @relation(fields: [structureDnaCode], references: [dnaCode], onDelete: Cascade)
  structureDnaCode         String
  date                     DateTime
  nbPlaces                 Int
  desinsectisation         Int
  remiseEnEtat             Int
  sousOccupation           Int
  travaux                  Int
  placesIndisponibles      Int
  placesVacantes           Int
  presencesInduesBPI       Int
  presencesInduesDeboutees Int
}

model FileUpload {
  @@schema("public")
  id                 Int                 @id @default(autoincrement())
  structure          Structure?          @relation(fields: [structureDnaCode], references: [dnaCode], onDelete: Cascade)
  structureDnaCode   String?
  key                String              @unique
  mimeType           String
  fileSize           Int
  originalName       String
  date               DateTime?
  category           FileUploadCategory?
  startDate          DateTime?
  endDate            DateTime?
  controle           Controle?           @relation(fields: [controleId], references: [id], onDelete: Cascade)
  controleId         Int?
  categoryName       String?
  parentFileUpload   FileUpload?         @relation("FileUploadToFileUpload", fields: [parentFileUploadId], references: [id], onDelete: SetNull)
  parentFileUploadId Int?
  childFileUploads   FileUpload[]        @relation("FileUploadToFileUpload")

  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt @default(now())
}

model Budget {
  @@schema("public")
  id                                Int        @id @default(autoincrement())
  structure                         Structure? @relation(fields: [structureDnaCode], references: [dnaCode], onDelete: Cascade)
  structureDnaCode                  String
  date                              DateTime
  ETP                               Float
  tauxEncadrement                   Float
  coutJournalier                    Float
  dotationDemandee                  Float?
  dotationAccordee                  Float?
  totalProduits                     Float?
  totalCharges                      Float?
  totalChargesProposees             Float?
  cumulResultatsNetsCPOM            Float?
  repriseEtat                       Float?
  excedentRecupere                  Float?
  excedentDeduit                    Float?
  reserveInvestissement             Float?
  chargesNonReconductibles          Float?
  reserveCompensationDeficits       Float?
  reserveCompensationBFR            Float?
  reserveCompensationAmortissements Float?
  fondsDedies                       Float?
  affectationReservesFondsDedies    Float?
  reportANouveau                    Float?
  autre                             Float?
  commentaire                       String?

  createdAt                         DateTime  @default(now())
  updatedAt                         DateTime  @updatedAt @default(now())
}

// Formulaires
model FormDefinition {
  @@schema("public")

  id                Int                @id @default(autoincrement())
  formId            Int?               // optionnel si tu veux relier à un "type" parent
  name              String
  version           Int
  stepsDefinition   FormStepDefinition[]

  forms             Form[]

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt @default(now())
}

model FormStepDefinition {
  @@schema("public")

  id                Int                @id @default(autoincrement())
  formDefinitionId  Int
  label             String
  authorType        AuthorType

  formDefinition    FormDefinition     @relation(fields: [formDefinitionId], references: [id])
  formSteps         FormStep[]

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt @default(now())
}

model Form {
  @@schema("public")

  id                Int                @id @default(autoincrement())
  structureCodeDna  String
  formDefinitionId  Int
  status            Boolean            @default(false) // Lié au bouton "Finaliser"

  structure         Structure          @relation(fields: [structureCodeDna], references: [dnaCode], onDelete: Cascade)
  formDefinition    FormDefinition     @relation(fields: [formDefinitionId], references: [id])
  formSteps         FormStep[]

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt @default(now())
}

model FormStep {
  @@schema("public")

  id                Int                @id @default(autoincrement())
  formId            Int
  stepDefinitionId  Int
  status            StepStatus         @default(NON_COMMENCE)
  // TODO : ajouter le champ authorId en lien avec une table Auteur plus tard

  form              Form               @relation(fields: [formId], references: [id], onDelete: Cascade)
  stepDefinition    FormStepDefinition @relation(fields: [stepDefinitionId], references: [id])

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt @default(now())
}

model Campaign {
  @@schema("public")

  id                Int                @id @default(autoincrement())
  structureCodeDna  String
  name              String
  launched          Boolean            @default(false)

  structure         Structure          @relation(fields: [structureCodeDna], references: [dnaCode], onDelete: Cascade)

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt @default(now())
}

model StructureReferential {
  @@schema("reporting")
  dnaCode           String             @id
  name              String?
  structure         Structure? @relation("StructureToReferential", fields: [dnaCode], references: [dnaCode])

  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt @default(now())
}


model Operateur {
  @@schema("public")
  id                    Int         @id @default(autoincrement())
  name                  String
  structures            Structure[]
  directionGenerale     String?
  siret                 String?
  siegeSocial           String?

  createdAt             DateTime  @default(now())
  updatedAt            DateTime  @updatedAt @default(now())
}

// Enums
enum Repartition {
  @@schema("public")
  DIFFUS
  COLLECTIF
  MIXTE
}

enum ControleType {
  @@schema("public")
  INOPINE
  PROGRAMME
}

enum PublicType {
  @@schema("public")
  TOUT_PUBLIC
  FAMILLE
  PERSONNES_ISOLEES
}

enum StructureType {
  @@schema("public")
  CADA
  HUDA
  CPH
  CAES
  PRAHDA
}

enum ContactType {
  @@schema("public")
  PRINCIPAL
  SECONDAIRE
  AUTRE
}

enum FileUploadCategory {
  @@schema("public")
  BUDGET_PREVISIONNEL_DEMANDE
  RAPPORT_BUDGETAIRE
  BUDGET_PREVISIONNEL_RETENU
  BUDGET_RECTIFICATIF
  COMPTE_ADMINISTRATIF_SOUMIS
  RAPPORT_ACTIVITE
  COMPTE_ADMINISTRATIF_RETENU
  DEMANDE_SUBVENTION
  COMPTE_RENDU_FINANCIER
  RAPPORT_ACTIVITE_OPERATEUR
  ARRETE_AUTORISATION
  CONVENTION
  ARRETE_TARIFICATION
  CPOM
  INSPECTION_CONTROLE
  AUTRE
}

enum StructureState {
  @@schema("public")
  A_FINALISER
  FINALISE
}

enum AuthorType {
  @@schema("public")
  OPERATEUR
  AGENT
}

enum StepStatus {
  @@schema("public")
  NON_COMMENCE
  COMMENCE
  FINALISE
  VALIDE
}

// Views
view ComparaisonPlaces {
  @@schema("reporting")
  dnaCode                   String?
  total_places_autorisees   Int?
  places_autorisees         Int?
  total_places_activite     Int?
  diff_places               Int?
  diff_places_activite      Int?
  pct_diff_places           Float?
  pct_diff_places_activite  Float?
}

view StructuresAggregates {
  @@schema("reporting")
  dnaCode                       String?
  places_autorisees_structure   Int?
  pmr_structure                 Int?
  lgbt_structure                Int?
  fvv_teh_structure             Int?
  places_autorisees_adresse     Int?
  qpv_adresse                   Int?
  logement_social_adresse       Int?
  date_adresse                  DateTime?
  nb_adresses                   Int?
  date_structure                DateTime?
  nb_places_activite            Int?
  diff_places_adresse           Int?
  pct_diff_places_adresse       Float?
  diff_places_activite          Int?
  pct_diff_places_activite      Float?
  created_at                    DateTime?
  updated_at                    DateTime?
}

view OperateursAggregates {
  @@schema("reporting")
  id                            Int
  name                          String
  directionGenerale             String?
  siret                         String?
  siegeSocial                   String?
  nb_structures                 Int
  places_autorisees_structure   Int?
  pmr_structure                 Int?
  lgbt_structure                Int?
  fvv_teh_structure             Int?
  places_autorisees_adresse     Int?
  qpv_adresse                   Int?
  logement_social_adresse       Int?
  created_at                    DateTime?
  updated_at                    DateTime?
}