generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Structure {
  id                           Int                         @id @default(autoincrement())
  dnaCode                      String                      @unique
  oldOperateur                 String
  filiale                      String?
  type                         StructureType
  oldNbPlaces                     Int
  placesACreer                 Int?
  placesAFermer                Int?
  echeancePlacesACreer         DateTime?
  echeancePlacesAFermer        DateTime?
  adresseAdministrative        String
  codePostalAdministratif      String
  communeAdministrative        String
  departementAdministratif     String
  latitude                     Decimal
  longitude                    Decimal
  nom                          String?
  debutConvention              DateTime?
  finConvention                DateTime?
  cpom                         Boolean
  creationDate                 DateTime
  finessCode                   String?
  lgbt                         Boolean
  fvvTeh                       Boolean
  public                       PublicType
  debutPeriodeAutorisation     DateTime?
  finPeriodeAutorisation       DateTime?
  debutCpom                    DateTime?
  finCpom                      DateTime?
  notes                        String?
  state                        StructureState              @default(A_FINALISER)
  controles                    Controle[]
  evaluations                  Evaluation[]
  evenementsIndesirablesGraves EvenementIndesirableGrave[]
  adresses                     Adresse[]
  contacts                     Contact[]
  structureTypologies          StructureTypologie[]
  activites                    Activite[]
  fileUploads                  FileUpload[]
  budgets                      Budget[]
  operateur                    Operateur?                  @relation(fields: [operateurId], references: [id])
  operateurId                  Int?

  createdAt                    DateTime  @default(now())
  lastUpdate                   DateTime  @updatedAt @default(now())
}

model Controle {
  id               Int          @id @default(autoincrement())
  structure        Structure    @relation(fields: [structureDnaCode], references: [dnaCode], onDelete: Cascade)
  structureDnaCode String
  date             DateTime
  type             ControleType
  fileUploads      FileUpload[]

  createdAt        DateTime  @default(now())
  lastUpdate       DateTime  @updatedAt @default(now()) 
}

model Evaluation {
  id               Int       @id @default(autoincrement())
  structure        Structure @relation(fields: [structureDnaCode], references: [dnaCode], onDelete: Cascade)
  structureDnaCode String
  date             DateTime
  notePersonne     Int
  notePro          Int
  noteStructure    Int
  note             Int

  createdAt        DateTime  @default(now())
  lastUpdate       DateTime  @updatedAt @default(now())
}

model EvenementIndesirableGrave {
  id               Int       @id @default(autoincrement())
  structure        Structure @relation(fields: [structureDnaCode], references: [dnaCode], onDelete: Cascade)
  structureDnaCode String
  numeroDossier    String
  evenementDate    DateTime
  declarationDate  DateTime
  type             String

  createdAt        DateTime  @default(now())
  lastUpdate       DateTime  @updatedAt @default(now())
}

model Adresse {
  id                Int                @id @default(autoincrement())
  structure         Structure          @relation(fields: [structureDnaCode], references: [dnaCode], onDelete: Cascade)
  structureDnaCode  String
  adresse           String
  codePostal        String
  commune           String
  repartition       Repartition
  adresseTypologies AdresseTypologie[]

  createdAt        DateTime  @default(now())
  lastUpdate       DateTime  @updatedAt @default(now())
}

model AdresseTypologie {
  id               Int      @id @default(autoincrement())
  adresse          Adresse  @relation(fields: [adresseId], references: [id], onDelete: Cascade)
  adresseId        Int
  placesAutorisees Int
  date             DateTime
  qpv              Int
  logementSocial   Int

  createdAt        DateTime  @default(now())
  lastUpdate       DateTime  @updatedAt @default(now())
}

model Contact {
  id               Int       @id @default(autoincrement())
  structure        Structure @relation(fields: [structureDnaCode], references: [dnaCode], onDelete: Cascade)
  structureDnaCode String
  prenom           String
  nom              String
  telephone        String
  email            String
  role             String
  type             ContactType @default(AUTRE)

  createdAt        DateTime  @default(now())
  lastUpdate       DateTime  @updatedAt @default(now())
}

model StructureTypologie {
  id               Int       @id @default(autoincrement())
  structure        Structure @relation(fields: [structureDnaCode], references: [dnaCode], onDelete: Cascade)
  structureDnaCode String
  date             DateTime
  placesAutorisees Int?
  pmr              Int
  lgbt             Int
  fvvTeh           Int

  createdAt        DateTime  @default(now())
  lastUpdate       DateTime  @updatedAt @default(now())
}

model Activite {
  id                       Int        @id @default(autoincrement())
  structure                Structure? @relation(fields: [structureDnaCode], references: [dnaCode], onDelete: Cascade)
  structureDnaCode         String
  date                     DateTime
  nbPlaces                 Int
  desinsectisation         Int
  remiseEnEtat             Int
  sousOccupation           Int
  travaux                  Int
  placesIndisponibles      Int
  placesVacantes           Int
  presencesInduesBPI       Int
  presencesInduesDeboutees Int

  createdAt                DateTime  @default(now())
  lastUpdate               DateTime  @updatedAt @default(now())
}

model FileUpload {
  id                 Int                 @id @default(autoincrement())
  structure          Structure?          @relation(fields: [structureDnaCode], references: [dnaCode], onDelete: Cascade)
  structureDnaCode   String?
  key                String              @unique
  mimeType           String
  fileSize           Int
  originalName       String
  date               DateTime?
  category           FileUploadCategory?
  startDate          DateTime?
  endDate            DateTime?
  controle           Controle?           @relation(fields: [controleId], references: [id], onDelete: Cascade)
  controleId         Int?
  categoryName       String?
  parentFileUpload   FileUpload?         @relation("FileUploadToFileUpload", fields: [parentFileUploadId], references: [id], onDelete: SetNull)
  parentFileUploadId Int?
  childFileUploads   FileUpload[]        @relation("FileUploadToFileUpload")

  createdAt          DateTime  @default(now())
  lastUpdate         DateTime  @updatedAt @default(now())
}

model Budget {
  id                                Int        @id @default(autoincrement())
  structure                         Structure? @relation(fields: [structureDnaCode], references: [dnaCode], onDelete: Cascade)
  structureDnaCode                  String
  date                              DateTime
  ETP                               Float
  tauxEncadrement                   Float
  coutJournalier                    Float
  dotationDemandee                  Float?
  dotationAccordee                  Float?
  totalProduits                     Float?
  totalCharges                      Float?
  totalChargesProposees             Float?
  cumulResultatsNetsCPOM            Float?
  repriseEtat                       Float?
  excedentRecupere                  Float?
  excedentDeduit                    Float?
  reserveInvestissement             Float?
  chargesNonReconductibles          Float?
  reserveCompensationDeficits       Float?
  reserveCompensationBFR            Float?
  reserveCompensationAmortissements Float?
  fondsDedies                       Float?
  affectationReservesFondsDedies    Float?
  reportANouveau                    Float?
  autre                             Float?
  commentaire                       String?

  createdAt                         DateTime  @default(now())
  lastUpdate                        DateTime  @updatedAt @default(now())
}

model Operateur {
  id                    Int         @id @default(autoincrement())
  name                  String
  structures            Structure[]
  directionGenerale     String? @map("direction_generale")
  siret                 String?
  siegeSocial           String? @map("siege_social")

  createdAt             DateTime  @default(now())
  lastUpdate            DateTime  @updatedAt @default(now())
}

enum Repartition {
  DIFFUS
  COLLECTIF
  MIXTE
}

enum ControleType {
  INOPINE
  PROGRAMME
}

enum PublicType {
  TOUT_PUBLIC
  FAMILLE
  PERSONNES_ISOLEES
}

enum StructureType {
  CADA
  HUDA
  CPH
  CAES
  PRAHDA
}

enum ContactType {
  PRINCIPAL
  SECONDAIRE
  AUTRE
}

enum FileUploadCategory {
  BUDGET_PREVISIONNEL_DEMANDE
  RAPPORT_BUDGETAIRE
  BUDGET_PREVISIONNEL_RETENU
  BUDGET_RECTIFICATIF
  COMPTE_ADMINISTRATIF_SOUMIS
  RAPPORT_ACTIVITE
  COMPTE_ADMINISTRATIF_RETENU
  DEMANDE_SUBVENTION
  COMPTE_RENDU_FINANCIER
  RAPPORT_ACTIVITE_OPERATEUR
  ARRETE_AUTORISATION
  CONVENTION
  ARRETE_TARIFICATION
  CPOM
  INSPECTION_CONTROLE
  AUTRE
}

enum StructureState {
  A_FINALISER
  FINALISE
}
